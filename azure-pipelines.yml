trigger:
  - test

variables:
  NODE_VERSION: 16.17.0
  SPRING_OUTPUT_ANSI_ENABLED: NEVER
  SPRING_JPA_SHOW_SQL: false
  JHI_DISABLE_WEBPACK_LOGS: true
  NG_CLI_ANALYTICS: 'false'
  JHI_E2E_HEADLESS: true

stages:
  - stage: Test
    displayName: Test stage
    jobs:
      - job: Test
        pool:
          vmImage: 'ubuntu-20.04'

        steps:
          #----------------------------------------------------------------------
          # Install all tools and check configuration
          #----------------------------------------------------------------------
          - task: NodeTool@0
            inputs:
              versionSpec: $(NODE_VERSION)
            displayName: 'TOOLS: install Node.js'
          #----------------------------------------------------------------------
          # Tests
          #----------------------------------------------------------------------
          - task: JavaToolInstaller@0
            inputs:
              versionSpec: 17
              jdkArchitectureOption: 'x64'
              jdkSourceOption: 'PreInstalled'
            displayName: 'Change Java version'
          - task: Npm@1
            inputs:
              command: 'install'
            displayName: 'INSTALL: launch npm install'
          - script: chmod +x gradlew
          - task: Npm@1
            inputs:
              command: 'custom'
              customCommand: ' run ci:backend:test'
            displayName: 'TESTS: backend'
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/TEST-*.xml'
              searchFolder: '$(Build.SourcesDirectory)/target/test-results'
            condition: succeededOrFailed()
            displayName: 'TESTS: publish test results'
          - task: Npm@1
            inputs:
              command: 'custom'
              customCommand: ' run ci:frontend:test'
            displayName: 'TESTS: frontend'
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '$(Build.SourcesDirectory)/target/test-results/TESTS-results-jest.xml'
            condition: succeededOrFailed()
            displayName: 'TESTS: publish test results'
          - task: Npm@1
            inputs:
              command: 'custom'
              customCommand: ' run java:jar:prod'
            displayName: 'TESTS: packaging'

  - stage: Deliver
    displayName: Deliver stage
    jobs:
      - job: deliver
        displayName: publish artifact or docker
        pool:
          vmImage: $(VM_IMAGE_NAME)

        steps:
          - task: JavaToolInstaller@0
            inputs:
              versionSpec: 17
              jdkArchitectureOption: 'x64'
              jdkSourceOption: 'PreInstalled'
            displayName: 'Change Java version'
          - task: Npm@1
            inputs:
              command: 'custom'
              customCommand: ' run java:jar:prod'
            displayName: 'TESTS: packaging'

          - task: CopyFiles@2
            displayName: 'Copy Files to artifact staging directory'
            inputs:
              SourceFolder: '$(System.DefaultWorkingDirectory)'
              Contents: '**/target/proybaseanggrd2*.jar'
              TargetFolder: $(Build.ArtifactStagingDirectory)

          - upload: $(Build.ArtifactStagingDirectory)
            artifact: drop

  - stage: Deploy
    displayName: Deploy stage
    dependsOn: Deliver
    condition: succeeded()
    jobs:
      - deployment: Deploy
        displayName: Deploy
        environment: $(ENVIRONMENT_NAME)
        pool:
          vmImage: $(VM_IMAGE_NAME)
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebApp@1
                  displayName: 'Azure Web App Deploy: $(WEBAPP_NAME)'
                  inputs:
                    azureSubscription: $(AZURE_SUBSCRIPTION)
                    appType: webAppLinux
                    appName: $(WEBAPP_NAME)
                    package: '$(Pipeline.Workspace)/drop/**/target/*.?(jar)'
